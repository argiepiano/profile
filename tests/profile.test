<?php

/**
 * Test basic CRUD functionality.
 */
class ProfileCRUDTestCase extends BackdropWebTestCase {

  function setUp() {
    parent::setUp('profile', 'locale');

    $type1 = new stdClass();
    $type1->type = 'test';
    $type1->label = 'label';
    $type1->weight = 0;
    $type1->storage = PROFILE_STORAGE_NORMAL;
    profile_type_save($type1);

    $type2 = new stdClass();
    $type2->type = 'test2';
    $type2->label = 'label2';
    $type2->weight = 2;
    $type2->storage = PROFILE_STORAGE_NORMAL;
    profile_type_save($type2);

    backdrop_static_reset('profile_get_types');

    profile_load_multiple(FALSE, array(), TRUE);

    // Add a field to main type, which is created during module installation.
    $field = array(
      'field_name' => 'profile_fullname',
      'type' => 'text',
      'cardinality' => 1,
      'translatable' => FALSE,
    );
    field_create_field($field);
    $instance = array(
      'entity_type' => 'profile',
      'field_name' => 'profile_fullname',
      'bundle' => 'main',
      'label' => 'Full name',
      'description' => 'Specify your first and last name.',
      'widget' => array(
        'type' => 'text_textfield',
        'weight' => 0,
      ),
    );
    field_create_instance($instance);
  }

  /**
   * Tests CRUD for a profile related to a user and one unrelated to a user.
   */
  function testCRUD() {
    $user1 = $this->backdropCreateUser();
    // Create profiles for the user1 and unrelated to a user.
    profile_save(profile_create(array('type' => 'test', 'uid' => $user1->uid)));
    profile_save(profile_create(array('type' => 'test2', 'uid' => $user1->uid)));
    $profile = profile_create(array('type' => 'test', 'uid' => NULL));

    profile_save($profile);

    $profiles = profile_load_by_user($user1);
    $this->assertEqual($profiles['test']->label(), 'label', 'Created and loaded profile 1.');
    $this->assertEqual($profiles['test2']->label(), 'label2', 'Created and loaded profile 2.');

    // Test looking up from static cache works also.
    $profiles = profile_load_by_user($user1);
    $this->assertEqual($profiles['test']->label, 'label', 'Looked up profiles again.');

    $loaded = profile_load($profile->pid);
    $this->assertEqual($loaded->pid, $profile->pid, 'Loaded profile unrelated to a user.');

    profile_delete($profiles['test']);
    $profiles2 = profile_load_by_user($user1);
    $this->assertEqual(array_keys($profiles2), array('test2'), 'Profile successfully deleted.');

    profile_save($profiles2['test2']);
    $this->assertEqual($profiles['test2']->pid, $profiles2['test2']->pid, 'Profile successfully updated.');

    // Delete a profile type.
    profile_type_delete(profile_get_types('test'));
    // Try deleting multiple profiles by deleting all existing profiles.
    $pids = array_keys(profile_load_multiple(FALSE));
    profile_delete_multiple($pids);
  }

  /**
   * Test registration integration.
   */
  function testRegistrationIntegration() {
    // Allow registration by site visitors without administrator approval.
    config_set('system.core', 'user_register', USER_REGISTER_VISITORS);
    $edit = array();
    $edit['name'] = $name = $this->randomName();
    $edit['mail'] = $mail = $edit['name'] . '@example.com';
    $edit['profile_main[profile_fullname][und][0][value]'] = $this->randomName();
    $this->backdropPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('A welcome message with further instructions has been sent to your e-mail address.'), t('User registered successfully.'));
    $new_user = user_load_by_name($name);
    $this->assertTrue($new_user->status, t('New account is active after registration.'));
    $this->assertEqual(profile_load_by_user($new_user, 'main')->profile_fullname[LANGUAGE_NONE][0]['value'], $edit['profile_main[profile_fullname][und][0][value]'], 'Profile created.');
  }

  /**
   * Test basic edit and display.
   */
  function testEditAndDisplay() {
    user_role_revoke_permissions(BACKDROP_AUTHENTICATED_ROLE, array('edit own main profile', 'view own main profile'));
    config_set('profile.settings', 'profile_display', 'tabs');
    menu_rebuild();
    $user1 = $this->backdropCreateUser();
    $this->backdropLogin($user1);
    // Make sure access is denied to the profile.
    $this->backdropGet('user/' . $user1->uid . '/edit/main');
    $this->assertText(t('Access denied'), 'Access has been denied.');

    // Test creating a profile manually (e.g. by an admin) and ensure the user
    // may not see it.
    profile_create(array('type' => 'main', 'uid' => $user1->uid))->save();
    $this->backdropGet('user/' . $user1->uid);
    $this->assertNoText(t('Main profile'), 'Profile data is not visible to the owner.');

    $user2 = $this->backdropCreateUser(array('edit any main profile', 'view any main profile'));
    $this->backdropLogin($user2);

    // Create profiles for the user2.
    $edit['profile_main[profile_fullname][und][0][value]'] = $this->randomName();
    $this->backdropPost('user/' . $user2->uid . '/edit/main', $edit, t('Save'));
    $this->assertText(t('The changes have been saved.'), 'Profile saved.');
    $this->assertEqual(profile_load_by_user($user2, 'main')->profile_fullname[LANGUAGE_NONE][0]['value'], $edit['profile_main[profile_fullname][und][0][value]'], 'Profile edited.');

    $this->backdropGet('user/' . $user2->uid);
    $this->assertText(check_plain($edit['profile_main[profile_fullname][und][0][value]']), 'Profile displayed.');
  }

  /**
   * Tests optional access parameters.
   */
  function testAccess() {
    config_set('profile.settings', 'profile_display', 'tabs');
    menu_rebuild();

    global $user;
    $admin_user = $this->backdropCreateUser(array('administer profiles'));
    $user2 = $this->backdropCreateUser();
    // Create profiles for the admin user.
    $profile = profile_create(array('type' => 'test', 'uid' => $admin_user->uid));
    profile_save($profile);

    // Make sure access is denied to the profile.
    $this->backdropLogin($user2);
    $this->backdropGet('user/' . $admin_user->uid . '/edit/main');
    $this->assertText(t('Access denied'), 'Access has been denied.');

    // Set the global user to ensure the defaults are respected.
    $user = $user2;

    // Ensure optional parameters check access for the current logged in user.
    $this->assertFalse(profile_access('edit'), 'No edit access for user 2');

    // Ensure optional parameters check access for the admin user.
    $this->assertTrue(profile_access('edit', NULL, $admin_user), 'No edit access for user 1');
  }

}
